@book{new_history_of_modern_computing,
        address = {Cambridge [Massachusetts]},
        series = {History of computing},
        title = {A new history of modern computing},
        isbn = {9780262542906},
        abstract = {"Bringing the history of modern computing fully up to date, from new applications to scientific computation to video games and the ubiquitous smartphone"},
        language = {eng},
        publisher = {The MIT Press},
        author = {Haigh, Thomas and Ceruzzi, Paul E.},
        year = {2021},
}

@misc{did_grace_hopper_create_the_first_compiler_2022,
	title = {Did {Grace} {Hopper} {Create} the {First} {Compiler}? {Communications} of the {ACM}},
	shorttitle = {Did {Grace} {Hopper} {Create} the {First} {Compiler}?},
	url = {https://cacm.acm.org/blogcacm/did-grace-hopper-create-the-first-compiler/},
	language = {en-US},
	urldate = {2025-10-04},
	month = dec,
	year = {2022},
    author = {Bruderer, Herbert}
}

@book{kernighan_unix:_2020,
	address = {s. l.},
	title = {{UNIX}: a history and a memoir},
	isbn = {9781695978553},
	shorttitle = {{UNIX}},
	language = {eng},
	publisher = {Kindle Direct Publishing},
	author = {Kernighan, Brian W.},
	year = {2020},
}

@inproceedings{bauer_software_1968,
	address = {Garmisch, Germany},
	title = {SOFTWARE ENGINEERING},
	booktitle = {SOFTWARE ENGINEERING},
	url = {https://www.scrummanager.com/files/nato1968e.pdf},
	publisher = {NATO SCIENCE COMMITTEE},
	author = {Bauer, Friedrick and Naur, Peter and Randell, Brian},
	month = oct,
	year = {1968},
}

@online{numba_cuda,
    author = {{NVIDIA Corporation}},
    title = {Numba CUDA},
    year = {2024},
    publisher = {GitHub},
    url = {https://github.com/NVIDIA/numba-cuda/},
    urldate = {2025-10-04},
    note = {The CUDA target for Numba}
}

@misc{jax-compiler,
  author = {JAX Authors},
  howpublished = {\url{https://github.com/jax-ml/jax}},
  title = {JAX: High performance array computing},
  year = {2024}
}

@inproceedings{lam_numba,
	address = {Austin Texas},
	title = {Numba: a {LLVM}-based {Python} {JIT} compiler},
	isbn = {9781450340052},
	shorttitle = {Numba},
	url = {https://dl.acm.org/doi/10.1145/2833157.2833162},
	doi = {10.1145/2833157.2833162},
	language = {en},
	urldate = {2025-10-04},
	booktitle = {Proceedings of the {Second} {Workshop} on the {LLVM} {Compiler} {Infrastructure} in {HPC}},
	publisher = {ACM},
	author = {Lam, Siu Kwan and Pitrou, Antoine and Seibert, Stanley},
	month = nov,
	year = {2015},
	pages = {1--6},
}

@inproceedings{triton_tillet,
	address = {Phoenix AZ USA},
	title = {Triton: an intermediate language and compiler for tiled neural network computations},
	isbn = {9781450367196},
	shorttitle = {Triton},
	url = {https://dl.acm.org/doi/10.1145/3315508.3329973},
	doi = {10.1145/3315508.3329973},
	language = {en},
	urldate = {2025-10-04},
	booktitle = {Proceedings of the 3rd {ACM} {SIGPLAN} {International} {Workshop} on {Machine} {Learning} and {Programming} {Languages}},
	publisher = {ACM},
	author = {Tillet, Philippe and Kung, H. T. and Cox, David},
	month = jun,
	year = {2019},
	pages = {10--19},
}

@inproceedings{llvm,
author = {Lattner, Chris and Adve, Vikram},
title = {LLVM: A Compilation Framework for Lifelong Program Analysis \& Transformation},
year = {2004},
isbn = {0769521029},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {This paper describes LLVM (Low Level Virtual Machine),a compiler framework designed to support transparent, lifelongprogram analysis and transformation for arbitrary programs,by providing high-level information to compilertransformations at compile-time, link-time, run-time, and inidle time between runs.LLVM defines a common, low-levelcode representation in Static Single Assignment (SSA) form,with several novel features: a simple, language-independenttype-system that exposes the primitives commonly used toimplement high-level language features; an instruction fortyped address arithmetic; and a simple mechanism that canbe used to implement the exception handling features ofhigh-level languages (and setjmp/longjmp in C) uniformlyand efficiently.The LLVM compiler framework and coderepresentation together provide a combination of key capabilitiesthat are important for practical, lifelong analysis andtransformation of programs.To our knowledge, no existingcompilation approach provides all these capabilities.We describethe design of the LLVM representation and compilerframework, and evaluate the design in three ways: (a) thesize and effectiveness of the representation, including thetype information it provides; (b) compiler performance forseveral interprocedural problems; and (c) illustrative examplesof the benefits LLVM provides for several challengingcompiler problems.},
booktitle = {Proceedings of the International Symposium on Code Generation and Optimization: Feedback-Directed and Runtime Optimization},
pages = {75},
location = {Palo Alto, California},
series = {CGO '04}
}

@inproceedings{mlir,
  author={Lattner, Chris and Amini, Mehdi and Bondhugula, Uday and Cohen, Albert and Davis, Andy and Pienaar, Jacques and Riddle, River and Shpeisman, Tatiana and Vasilache, Nicolas and Zinenko, Oleksandr},
  booktitle={2021 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)}, 
  title={MLIR: Scaling Compiler Infrastructure for Domain Specific Computation}, 
  year={2021},
  volume={},
  number={},
  pages={2-14},
  keywords={Program processors;Buildings;Semantics;Hardware;Software;Generators;Optimization},
  doi={10.1109/CGO51591.2021.9370308}}
